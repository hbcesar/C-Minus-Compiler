Gramática

    0 $accept: program $end

    1 program: func-decl-list

    2 func-decl-list: func-decl-list func-decl
    3               | func-decl

    4 func-decl: func-header func-body

    5 func-header: ret-type ID LPAREN params RPAREN

    6 func-body: LBRACE opt-var-decl opt-stmt-list RBRACE

    7 opt-var-decl: %empty
    8             | var-decl-list

    9 ret-type: INT
   10         | VOID

   11 params: VOID
   12       | param-list

   13 param-list: param-list COMMA param
   14           | param

   15 param: INT ID
   16      | INT ID LBRACK RBRACK

   17 var-decl-list: var-decl-list var-decl
   18              | var-decl

   19 var-decl: INT ID SEMI
   20         | INT ID LBRACK NUM RBRACK SEMI

   21 block: LBRACE opt-stmt-list RBRACE

   22 opt-stmt-list: %empty
   23              | stmt-list

   24 stmt-list: stmt-list stmt
   25          | stmt

   26 stmt: assign-stmt
   27     | if-stmt
   28     | while-stmt
   29     | return-stmt
   30     | func-call SEMI

   31 assign-stmt: lval ASSIGN arith-expr SEMI

   32 lval: ID
   33     | ID LBRACK NUM RBRACK
   34     | ID LBRACK ID RBRACK

   35 if-stmt: IF LPAREN bool-expr RPAREN block
   36        | IF LPAREN bool-expr RPAREN block ELSE block

   37 while-stmt: WHILE LPAREN bool-expr RPAREN block

   38 return-stmt: RETURN SEMI
   39            | RETURN arith-expr SEMI

   40 func-call: output-call
   41          | write-call
   42          | user-func-call

   43 input-call: INPUT LPAREN RPAREN

   44 output-call: OUTPUT LPAREN arith-expr RPAREN

   45 write-call: WRITE LPAREN STRING RPAREN

   46 user-func-call: ID LPAREN opt-arg-list RPAREN

   47 opt-arg-list: %empty
   48             | arg-list

   49 arg-list: arg-list COMMA arith-expr
   50         | arith-expr

   51 bool-expr: arith-expr LT arith-expr
   52          | arith-expr LE arith-expr
   53          | arith-expr GT arith-expr
   54          | arith-expr GE arith-expr
   55          | arith-expr EQ arith-expr
   56          | arith-expr NEQ arith-expr

   57 arith-expr: NUM
   58           | input-call
   59           | lval
   60           | user-func-call
   61           | LPAREN arith-expr RPAREN
   62           | arith-expr PLUS arith-expr
   63           | arith-expr MINUS arith-expr
   64           | arith-expr TIMES arith-expr
   65           | arith-expr OVER arith-expr


Terminais, com as regras onde eles aparecem

$end (0) 0
error (256)
INT (258) 9 15 16 19 20
VOID (259) 10 11
COMMA (260) 13 49
SEMI (261) 19 20 30 31 38 39
STRING (262) 45
IF (263) 35 36
WHILE (264) 37
INPUT (265) 43
OUTPUT (266) 44
WRITE (267) 45
ASSIGN (268) 31
RETURN (269) 38 39
LPAREN (270) 5 35 36 37 43 44 45 46 61
LBRACE (271) 6 21
LBRACK (272) 16 20 33 34
NUM (273) 20 33 57
ID (274) 5 15 16 19 20 32 33 34 46
ELSE (275) 36
RPAREN (276) 5 35 36 37 43 44 45 46 61
RBRACE (277) 6 21
RBRACK (278) 16 20 33 34
NEQ (279) 56
EQ (280) 55
LT (281) 51
LE (282) 52
GT (283) 53
GE (284) 54
PLUS (285) 62
MINUS (286) 63
TIMES (287) 64
OVER (288) 65


Não terminais com as regras onde eles aparecem

$accept (34)
    à esquerda: 0
program (35)
    à esquerda: 1, à direita: 0
func-decl-list (36)
    à esquerda: 2 3, à direita: 1 2
func-decl (37)
    à esquerda: 4, à direita: 2 3
func-header (38)
    à esquerda: 5, à direita: 4
func-body (39)
    à esquerda: 6, à direita: 4
opt-var-decl (40)
    à esquerda: 7 8, à direita: 6
ret-type (41)
    à esquerda: 9 10, à direita: 5
params (42)
    à esquerda: 11 12, à direita: 5
param-list (43)
    à esquerda: 13 14, à direita: 12 13
param (44)
    à esquerda: 15 16, à direita: 13 14
var-decl-list (45)
    à esquerda: 17 18, à direita: 8 17
var-decl (46)
    à esquerda: 19 20, à direita: 17 18
block (47)
    à esquerda: 21, à direita: 35 36 37
opt-stmt-list (48)
    à esquerda: 22 23, à direita: 6 21
stmt-list (49)
    à esquerda: 24 25, à direita: 23 24
stmt (50)
    à esquerda: 26 27 28 29 30, à direita: 24 25
assign-stmt (51)
    à esquerda: 31, à direita: 26
lval (52)
    à esquerda: 32 33 34, à direita: 31 59
if-stmt (53)
    à esquerda: 35 36, à direita: 27
while-stmt (54)
    à esquerda: 37, à direita: 28
return-stmt (55)
    à esquerda: 38 39, à direita: 29
func-call (56)
    à esquerda: 40 41 42, à direita: 30
input-call (57)
    à esquerda: 43, à direita: 58
output-call (58)
    à esquerda: 44, à direita: 40
write-call (59)
    à esquerda: 45, à direita: 41
user-func-call (60)
    à esquerda: 46, à direita: 42 60
opt-arg-list (61)
    à esquerda: 47 48, à direita: 46
arg-list (62)
    à esquerda: 49 50, à direita: 48 49
bool-expr (63)
    à esquerda: 51 52 53 54 55 56, à direita: 35 36 37
arith-expr (64)
    à esquerda: 57 58 59 60 61 62 63 64 65, à direita: 31 39 44 49
    50 51 52 53 54 55 56 61 62 63 64 65


Estado 0

    0 $accept: . program $end

    INT   deslocar, e ir ao estado 1
    VOID  deslocar, e ir ao estado 2

    program         ir ao estado 3
    func-decl-list  ir ao estado 4
    func-decl       ir ao estado 5
    func-header     ir ao estado 6
    ret-type        ir ao estado 7


Estado 1

    9 ret-type: INT .

    $padrão  reduzir usando a regra 9 (ret-type)


Estado 2

   10 ret-type: VOID .

    $padrão  reduzir usando a regra 10 (ret-type)


Estado 3

    0 $accept: program . $end

    $end  deslocar, e ir ao estado 8


Estado 4

    1 program: func-decl-list .
    2 func-decl-list: func-decl-list . func-decl

    INT   deslocar, e ir ao estado 1
    VOID  deslocar, e ir ao estado 2

    $padrão  reduzir usando a regra 1 (program)

    func-decl    ir ao estado 9
    func-header  ir ao estado 6
    ret-type     ir ao estado 7


Estado 5

    3 func-decl-list: func-decl .

    $padrão  reduzir usando a regra 3 (func-decl-list)


Estado 6

    4 func-decl: func-header . func-body

    LBRACE  deslocar, e ir ao estado 10

    func-body  ir ao estado 11


Estado 7

    5 func-header: ret-type . ID LPAREN params RPAREN

    ID  deslocar, e ir ao estado 12


Estado 8

    0 $accept: program $end .

    $padrão  aceitar


Estado 9

    2 func-decl-list: func-decl-list func-decl .

    $padrão  reduzir usando a regra 2 (func-decl-list)


Estado 10

    6 func-body: LBRACE . opt-var-decl opt-stmt-list RBRACE

    INT  deslocar, e ir ao estado 13

    $padrão  reduzir usando a regra 7 (opt-var-decl)

    opt-var-decl   ir ao estado 14
    var-decl-list  ir ao estado 15
    var-decl       ir ao estado 16


Estado 11

    4 func-decl: func-header func-body .

    $padrão  reduzir usando a regra 4 (func-decl)


Estado 12

    5 func-header: ret-type ID . LPAREN params RPAREN

    LPAREN  deslocar, e ir ao estado 17


Estado 13

   19 var-decl: INT . ID SEMI
   20         | INT . ID LBRACK NUM RBRACK SEMI

    ID  deslocar, e ir ao estado 18


Estado 14

    6 func-body: LBRACE opt-var-decl . opt-stmt-list RBRACE

    IF      deslocar, e ir ao estado 19
    WHILE   deslocar, e ir ao estado 20
    OUTPUT  deslocar, e ir ao estado 21
    WRITE   deslocar, e ir ao estado 22
    RETURN  deslocar, e ir ao estado 23
    ID      deslocar, e ir ao estado 24

    $padrão  reduzir usando a regra 22 (opt-stmt-list)

    opt-stmt-list   ir ao estado 25
    stmt-list       ir ao estado 26
    stmt            ir ao estado 27
    assign-stmt     ir ao estado 28
    lval            ir ao estado 29
    if-stmt         ir ao estado 30
    while-stmt      ir ao estado 31
    return-stmt     ir ao estado 32
    func-call       ir ao estado 33
    output-call     ir ao estado 34
    write-call      ir ao estado 35
    user-func-call  ir ao estado 36


Estado 15

    8 opt-var-decl: var-decl-list .
   17 var-decl-list: var-decl-list . var-decl

    INT  deslocar, e ir ao estado 13

    $padrão  reduzir usando a regra 8 (opt-var-decl)

    var-decl  ir ao estado 37


Estado 16

   18 var-decl-list: var-decl .

    $padrão  reduzir usando a regra 18 (var-decl-list)


Estado 17

    5 func-header: ret-type ID LPAREN . params RPAREN

    INT   deslocar, e ir ao estado 38
    VOID  deslocar, e ir ao estado 39

    params      ir ao estado 40
    param-list  ir ao estado 41
    param       ir ao estado 42


Estado 18

   19 var-decl: INT ID . SEMI
   20         | INT ID . LBRACK NUM RBRACK SEMI

    SEMI    deslocar, e ir ao estado 43
    LBRACK  deslocar, e ir ao estado 44


Estado 19

   35 if-stmt: IF . LPAREN bool-expr RPAREN block
   36        | IF . LPAREN bool-expr RPAREN block ELSE block

    LPAREN  deslocar, e ir ao estado 45


Estado 20

   37 while-stmt: WHILE . LPAREN bool-expr RPAREN block

    LPAREN  deslocar, e ir ao estado 46


Estado 21

   44 output-call: OUTPUT . LPAREN arith-expr RPAREN

    LPAREN  deslocar, e ir ao estado 47


Estado 22

   45 write-call: WRITE . LPAREN STRING RPAREN

    LPAREN  deslocar, e ir ao estado 48


Estado 23

   38 return-stmt: RETURN . SEMI
   39            | RETURN . arith-expr SEMI

    SEMI    deslocar, e ir ao estado 49
    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 56


Estado 24

   32 lval: ID .
   33     | ID . LBRACK NUM RBRACK
   34     | ID . LBRACK ID RBRACK
   46 user-func-call: ID . LPAREN opt-arg-list RPAREN

    LPAREN  deslocar, e ir ao estado 57
    LBRACK  deslocar, e ir ao estado 58

    $padrão  reduzir usando a regra 32 (lval)


Estado 25

    6 func-body: LBRACE opt-var-decl opt-stmt-list . RBRACE

    RBRACE  deslocar, e ir ao estado 59


Estado 26

   23 opt-stmt-list: stmt-list .
   24 stmt-list: stmt-list . stmt

    IF      deslocar, e ir ao estado 19
    WHILE   deslocar, e ir ao estado 20
    OUTPUT  deslocar, e ir ao estado 21
    WRITE   deslocar, e ir ao estado 22
    RETURN  deslocar, e ir ao estado 23
    ID      deslocar, e ir ao estado 24

    $padrão  reduzir usando a regra 23 (opt-stmt-list)

    stmt            ir ao estado 60
    assign-stmt     ir ao estado 28
    lval            ir ao estado 29
    if-stmt         ir ao estado 30
    while-stmt      ir ao estado 31
    return-stmt     ir ao estado 32
    func-call       ir ao estado 33
    output-call     ir ao estado 34
    write-call      ir ao estado 35
    user-func-call  ir ao estado 36


Estado 27

   25 stmt-list: stmt .

    $padrão  reduzir usando a regra 25 (stmt-list)


Estado 28

   26 stmt: assign-stmt .

    $padrão  reduzir usando a regra 26 (stmt)


Estado 29

   31 assign-stmt: lval . ASSIGN arith-expr SEMI

    ASSIGN  deslocar, e ir ao estado 61


Estado 30

   27 stmt: if-stmt .

    $padrão  reduzir usando a regra 27 (stmt)


Estado 31

   28 stmt: while-stmt .

    $padrão  reduzir usando a regra 28 (stmt)


Estado 32

   29 stmt: return-stmt .

    $padrão  reduzir usando a regra 29 (stmt)


Estado 33

   30 stmt: func-call . SEMI

    SEMI  deslocar, e ir ao estado 62


Estado 34

   40 func-call: output-call .

    $padrão  reduzir usando a regra 40 (func-call)


Estado 35

   41 func-call: write-call .

    $padrão  reduzir usando a regra 41 (func-call)


Estado 36

   42 func-call: user-func-call .

    $padrão  reduzir usando a regra 42 (func-call)


Estado 37

   17 var-decl-list: var-decl-list var-decl .

    $padrão  reduzir usando a regra 17 (var-decl-list)


Estado 38

   15 param: INT . ID
   16      | INT . ID LBRACK RBRACK

    ID  deslocar, e ir ao estado 63


Estado 39

   11 params: VOID .

    $padrão  reduzir usando a regra 11 (params)


Estado 40

    5 func-header: ret-type ID LPAREN params . RPAREN

    RPAREN  deslocar, e ir ao estado 64


Estado 41

   12 params: param-list .
   13 param-list: param-list . COMMA param

    COMMA  deslocar, e ir ao estado 65

    $padrão  reduzir usando a regra 12 (params)


Estado 42

   14 param-list: param .

    $padrão  reduzir usando a regra 14 (param-list)


Estado 43

   19 var-decl: INT ID SEMI .

    $padrão  reduzir usando a regra 19 (var-decl)


Estado 44

   20 var-decl: INT ID LBRACK . NUM RBRACK SEMI

    NUM  deslocar, e ir ao estado 66


Estado 45

   35 if-stmt: IF LPAREN . bool-expr RPAREN block
   36        | IF LPAREN . bool-expr RPAREN block ELSE block

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    bool-expr       ir ao estado 67
    arith-expr      ir ao estado 68


Estado 46

   37 while-stmt: WHILE LPAREN . bool-expr RPAREN block

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    bool-expr       ir ao estado 69
    arith-expr      ir ao estado 68


Estado 47

   44 output-call: OUTPUT LPAREN . arith-expr RPAREN

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 70


Estado 48

   45 write-call: WRITE LPAREN . STRING RPAREN

    STRING  deslocar, e ir ao estado 71


Estado 49

   38 return-stmt: RETURN SEMI .

    $padrão  reduzir usando a regra 38 (return-stmt)


Estado 50

   43 input-call: INPUT . LPAREN RPAREN

    LPAREN  deslocar, e ir ao estado 72


Estado 51

   61 arith-expr: LPAREN . arith-expr RPAREN

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 73


Estado 52

   57 arith-expr: NUM .

    $padrão  reduzir usando a regra 57 (arith-expr)


Estado 53

   59 arith-expr: lval .

    $padrão  reduzir usando a regra 59 (arith-expr)


Estado 54

   58 arith-expr: input-call .

    $padrão  reduzir usando a regra 58 (arith-expr)


Estado 55

   60 arith-expr: user-func-call .

    $padrão  reduzir usando a regra 60 (arith-expr)


Estado 56

   39 return-stmt: RETURN arith-expr . SEMI
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    SEMI   deslocar, e ir ao estado 74
    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78


Estado 57

   46 user-func-call: ID LPAREN . opt-arg-list RPAREN

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    $padrão  reduzir usando a regra 47 (opt-arg-list)

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    opt-arg-list    ir ao estado 79
    arg-list        ir ao estado 80
    arith-expr      ir ao estado 81


Estado 58

   33 lval: ID LBRACK . NUM RBRACK
   34     | ID LBRACK . ID RBRACK

    NUM  deslocar, e ir ao estado 82
    ID   deslocar, e ir ao estado 83


Estado 59

    6 func-body: LBRACE opt-var-decl opt-stmt-list RBRACE .

    $padrão  reduzir usando a regra 6 (func-body)


Estado 60

   24 stmt-list: stmt-list stmt .

    $padrão  reduzir usando a regra 24 (stmt-list)


Estado 61

   31 assign-stmt: lval ASSIGN . arith-expr SEMI

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 84


Estado 62

   30 stmt: func-call SEMI .

    $padrão  reduzir usando a regra 30 (stmt)


Estado 63

   15 param: INT ID .
   16      | INT ID . LBRACK RBRACK

    LBRACK  deslocar, e ir ao estado 85

    $padrão  reduzir usando a regra 15 (param)


Estado 64

    5 func-header: ret-type ID LPAREN params RPAREN .

    $padrão  reduzir usando a regra 5 (func-header)


Estado 65

   13 param-list: param-list COMMA . param

    INT  deslocar, e ir ao estado 38

    param  ir ao estado 86


Estado 66

   20 var-decl: INT ID LBRACK NUM . RBRACK SEMI

    RBRACK  deslocar, e ir ao estado 87


Estado 67

   35 if-stmt: IF LPAREN bool-expr . RPAREN block
   36        | IF LPAREN bool-expr . RPAREN block ELSE block

    RPAREN  deslocar, e ir ao estado 88


Estado 68

   51 bool-expr: arith-expr . LT arith-expr
   52          | arith-expr . LE arith-expr
   53          | arith-expr . GT arith-expr
   54          | arith-expr . GE arith-expr
   55          | arith-expr . EQ arith-expr
   56          | arith-expr . NEQ arith-expr
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    NEQ    deslocar, e ir ao estado 89
    EQ     deslocar, e ir ao estado 90
    LT     deslocar, e ir ao estado 91
    LE     deslocar, e ir ao estado 92
    GT     deslocar, e ir ao estado 93
    GE     deslocar, e ir ao estado 94
    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78


Estado 69

   37 while-stmt: WHILE LPAREN bool-expr . RPAREN block

    RPAREN  deslocar, e ir ao estado 95


Estado 70

   44 output-call: OUTPUT LPAREN arith-expr . RPAREN
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    RPAREN  deslocar, e ir ao estado 96
    PLUS    deslocar, e ir ao estado 75
    MINUS   deslocar, e ir ao estado 76
    TIMES   deslocar, e ir ao estado 77
    OVER    deslocar, e ir ao estado 78


Estado 71

   45 write-call: WRITE LPAREN STRING . RPAREN

    RPAREN  deslocar, e ir ao estado 97


Estado 72

   43 input-call: INPUT LPAREN . RPAREN

    RPAREN  deslocar, e ir ao estado 98


Estado 73

   61 arith-expr: LPAREN arith-expr . RPAREN
   62           | arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    RPAREN  deslocar, e ir ao estado 99
    PLUS    deslocar, e ir ao estado 75
    MINUS   deslocar, e ir ao estado 76
    TIMES   deslocar, e ir ao estado 77
    OVER    deslocar, e ir ao estado 78


Estado 74

   39 return-stmt: RETURN arith-expr SEMI .

    $padrão  reduzir usando a regra 39 (return-stmt)


Estado 75

   62 arith-expr: arith-expr PLUS . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 100


Estado 76

   63 arith-expr: arith-expr MINUS . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 101


Estado 77

   64 arith-expr: arith-expr TIMES . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 102


Estado 78

   65 arith-expr: arith-expr OVER . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 103


Estado 79

   46 user-func-call: ID LPAREN opt-arg-list . RPAREN

    RPAREN  deslocar, e ir ao estado 104


Estado 80

   48 opt-arg-list: arg-list .
   49 arg-list: arg-list . COMMA arith-expr

    COMMA  deslocar, e ir ao estado 105

    $padrão  reduzir usando a regra 48 (opt-arg-list)


Estado 81

   50 arg-list: arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 50 (arg-list)


Estado 82

   33 lval: ID LBRACK NUM . RBRACK

    RBRACK  deslocar, e ir ao estado 106


Estado 83

   34 lval: ID LBRACK ID . RBRACK

    RBRACK  deslocar, e ir ao estado 107


Estado 84

   31 assign-stmt: lval ASSIGN arith-expr . SEMI
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    SEMI   deslocar, e ir ao estado 108
    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78


Estado 85

   16 param: INT ID LBRACK . RBRACK

    RBRACK  deslocar, e ir ao estado 109


Estado 86

   13 param-list: param-list COMMA param .

    $padrão  reduzir usando a regra 13 (param-list)


Estado 87

   20 var-decl: INT ID LBRACK NUM RBRACK . SEMI

    SEMI  deslocar, e ir ao estado 110


Estado 88

   35 if-stmt: IF LPAREN bool-expr RPAREN . block
   36        | IF LPAREN bool-expr RPAREN . block ELSE block

    LBRACE  deslocar, e ir ao estado 111

    block  ir ao estado 112


Estado 89

   56 bool-expr: arith-expr NEQ . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 113


Estado 90

   55 bool-expr: arith-expr EQ . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 114


Estado 91

   51 bool-expr: arith-expr LT . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 115


Estado 92

   52 bool-expr: arith-expr LE . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 116


Estado 93

   53 bool-expr: arith-expr GT . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 117


Estado 94

   54 bool-expr: arith-expr GE . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 118


Estado 95

   37 while-stmt: WHILE LPAREN bool-expr RPAREN . block

    LBRACE  deslocar, e ir ao estado 111

    block  ir ao estado 119


Estado 96

   44 output-call: OUTPUT LPAREN arith-expr RPAREN .

    $padrão  reduzir usando a regra 44 (output-call)


Estado 97

   45 write-call: WRITE LPAREN STRING RPAREN .

    $padrão  reduzir usando a regra 45 (write-call)


Estado 98

   43 input-call: INPUT LPAREN RPAREN .

    $padrão  reduzir usando a regra 43 (input-call)


Estado 99

   61 arith-expr: LPAREN arith-expr RPAREN .

    $padrão  reduzir usando a regra 61 (arith-expr)


Estado 100

   62 arith-expr: arith-expr . PLUS arith-expr
   62           | arith-expr PLUS arith-expr .
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 62 (arith-expr)


Estado 101

   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   63           | arith-expr MINUS arith-expr .
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 63 (arith-expr)


Estado 102

   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   64           | arith-expr TIMES arith-expr .
   65           | arith-expr . OVER arith-expr

    $padrão  reduzir usando a regra 64 (arith-expr)


Estado 103

   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr
   65           | arith-expr OVER arith-expr .

    $padrão  reduzir usando a regra 65 (arith-expr)


Estado 104

   46 user-func-call: ID LPAREN opt-arg-list RPAREN .

    $padrão  reduzir usando a regra 46 (user-func-call)


Estado 105

   49 arg-list: arg-list COMMA . arith-expr

    INPUT   deslocar, e ir ao estado 50
    LPAREN  deslocar, e ir ao estado 51
    NUM     deslocar, e ir ao estado 52
    ID      deslocar, e ir ao estado 24

    lval            ir ao estado 53
    input-call      ir ao estado 54
    user-func-call  ir ao estado 55
    arith-expr      ir ao estado 120


Estado 106

   33 lval: ID LBRACK NUM RBRACK .

    $padrão  reduzir usando a regra 33 (lval)


Estado 107

   34 lval: ID LBRACK ID RBRACK .

    $padrão  reduzir usando a regra 34 (lval)


Estado 108

   31 assign-stmt: lval ASSIGN arith-expr SEMI .

    $padrão  reduzir usando a regra 31 (assign-stmt)


Estado 109

   16 param: INT ID LBRACK RBRACK .

    $padrão  reduzir usando a regra 16 (param)


Estado 110

   20 var-decl: INT ID LBRACK NUM RBRACK SEMI .

    $padrão  reduzir usando a regra 20 (var-decl)


Estado 111

   21 block: LBRACE . opt-stmt-list RBRACE

    IF      deslocar, e ir ao estado 19
    WHILE   deslocar, e ir ao estado 20
    OUTPUT  deslocar, e ir ao estado 21
    WRITE   deslocar, e ir ao estado 22
    RETURN  deslocar, e ir ao estado 23
    ID      deslocar, e ir ao estado 24

    $padrão  reduzir usando a regra 22 (opt-stmt-list)

    opt-stmt-list   ir ao estado 121
    stmt-list       ir ao estado 26
    stmt            ir ao estado 27
    assign-stmt     ir ao estado 28
    lval            ir ao estado 29
    if-stmt         ir ao estado 30
    while-stmt      ir ao estado 31
    return-stmt     ir ao estado 32
    func-call       ir ao estado 33
    output-call     ir ao estado 34
    write-call      ir ao estado 35
    user-func-call  ir ao estado 36


Estado 112

   35 if-stmt: IF LPAREN bool-expr RPAREN block .
   36        | IF LPAREN bool-expr RPAREN block . ELSE block

    ELSE  deslocar, e ir ao estado 122

    $padrão  reduzir usando a regra 35 (if-stmt)


Estado 113

   56 bool-expr: arith-expr NEQ arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 56 (bool-expr)


Estado 114

   55 bool-expr: arith-expr EQ arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 55 (bool-expr)


Estado 115

   51 bool-expr: arith-expr LT arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 51 (bool-expr)


Estado 116

   52 bool-expr: arith-expr LE arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 52 (bool-expr)


Estado 117

   53 bool-expr: arith-expr GT arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 53 (bool-expr)


Estado 118

   54 bool-expr: arith-expr GE arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 54 (bool-expr)


Estado 119

   37 while-stmt: WHILE LPAREN bool-expr RPAREN block .

    $padrão  reduzir usando a regra 37 (while-stmt)


Estado 120

   49 arg-list: arg-list COMMA arith-expr .
   62 arith-expr: arith-expr . PLUS arith-expr
   63           | arith-expr . MINUS arith-expr
   64           | arith-expr . TIMES arith-expr
   65           | arith-expr . OVER arith-expr

    PLUS   deslocar, e ir ao estado 75
    MINUS  deslocar, e ir ao estado 76
    TIMES  deslocar, e ir ao estado 77
    OVER   deslocar, e ir ao estado 78

    $padrão  reduzir usando a regra 49 (arg-list)


Estado 121

   21 block: LBRACE opt-stmt-list . RBRACE

    RBRACE  deslocar, e ir ao estado 123


Estado 122

   36 if-stmt: IF LPAREN bool-expr RPAREN block ELSE . block

    LBRACE  deslocar, e ir ao estado 111

    block  ir ao estado 124


Estado 123

   21 block: LBRACE opt-stmt-list RBRACE .

    $padrão  reduzir usando a regra 21 (block)


Estado 124

   36 if-stmt: IF LPAREN bool-expr RPAREN block ELSE block .

    $padrão  reduzir usando a regra 36 (if-stmt)
